import { PhaseType, AutomationType, StepStatus, MigrationStep } from '../types/migration';

export const migrationSteps: MigrationStep[] = [
  {
    id: 1,
    title: 'Check for resources shared via RAM',
    description: 'Check for resources shared via RAM with the rest of the Org or OUs',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 15,
    requiresConfirmation: false,
    notes: 'Agent will automatically scan for shared resources',
    slug: 'check_ram'
  },
  {
    id: 2,
    title: 'Check for delegated admin services',
    description: 'Check if services like AWS Backups, GuardDuty, Inspector have delegated admin in old org',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 20,
    requiresConfirmation: false,
    notes: 'Agent will identify all delegated admin services',
    slug: 'check_admin_services'
  },
  {
    id: 3,
    title: 'Cost explorer data analysis',
    description: 'Cost explorer data in Payer2 will NOT have historical data from Payer1',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'Historical cost data will need to be preserved separately',
    slug: 'cost_explorer_data'
  },
  {
    id: 4,
    title: 'Check for RIs or Savings Plans',
    description: 'Check if any existing RIs or SPs are purchased in Payer 1 and in use',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'Agent will identify all active reservations and savings plans',
    slug: 'check_savings'
  },
  {
    id: 5,
    title: 'Check policy documents',
    description: 'Check policy documents for Org/OU references (IAM, S3, KMS, etc.)',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 70,
    requiresConfirmation: true,
    notes: 'Policies referencing old Org IDs will need updating',
    slug: 'check_policies'
  },
  {
    id: 6,
    title: 'Check StackSets',
    description: 'Check if StackSets use AWS Organizations',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 70,
    requiresConfirmation: false,
    notes: 'StackSets may need reconfiguration in new organization',
    slug: 'check_stacksets'
  },
  {
    id: 7,
    title: 'Update templates',
    description: 'Update templates (CFN/Terraform/CDK) using Org/OUs',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 300,
    requiresConfirmation: true,
    notes: 'Templates must be updated with new Org/OU IDs',
    slug: 'update-templates'
  },
  {
    id: 8,
    title: 'Create fallback IAM admin',
    description: 'Create fallback IAM admin user for login in case SSO fails',
    phase: PhaseType.ASSESS_EXISTING,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 15,
    requiresConfirmation: true,
    notes: 'Emergency access user with appropriate permissions',
    slug: 'create_iam_admin'
  },
  {
    id: 9,
    title: 'Enable MFA for Root user',
    description: 'Enable MFA for Root user on new Management Account',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 10,
    requiresConfirmation: true,
    notes: 'Security best practice for root account protection',
    slug: 'enable-mfa'
  },
  {
    id: 10,
    title: 'Ensure new payer is set to invoicing',
    description: 'New payer configuration',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 20,
    requiresConfirmation: true,
    notes: 'Required for proper billing setup',
    slug: 'setup-invoicing'
  },
  {
    id: 11,
    title: 'Ensure new payer is under EDP',
    description: 'New payer configuration',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 20,
    requiresConfirmation: true,
    notes: 'Enterprise Discount Program enrollment required',
    slug: 'setup-edp'
  },
  {
    id: 12,
    title: 'Ensure new payer has Enterprise Support',
    description: 'New payer configuration',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.SEMI_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 20,
    requiresConfirmation: true,
    notes: 'Enterprise Support plan must be activated',
    slug: 'setup-support'
  },
  {
    id: 13,
    title: 'Identify email IDs',
    description: 'Identify two email IDs for Log Archive and Audit accounts',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 15,
    requiresConfirmation: true,
    notes: 'Unique email addresses needed for security accounts',
    slug: 'identify-emails'
  },
  {
    id: 14,
    title: 'Control Tower Landing Zone',
    description: 'Identify Control Tower Landing zone home region.',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: true,
    estimatedTime: 10,
    requiresConfirmation: true,
    notes: 'Landing Zone home region',
    slug: 'landing-zone'
  },
  {
    id: 15,
    title: 'Create KMS key',
    description: 'Create a Symmetric KMS key (optional)',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 10,
    requiresConfirmation: true,
    notes: 'Encryption key for securing Control Tower resources',
    slug: 'create-kms'
  },
  {
    id: 16,
    title: 'Deploy Control Tower',
    description: 'Deploy Control Tower, Landing Zone on new payer',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.SEMI_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 60,
    requiresConfirmation: true,
    notes: 'Sets up governance foundation for the new organization',
    slug: 'deploy-control-tower'
  },
  {
    id: 17,
    title: 'Raise AWS Organizations service limits',
    description: 'Raise AWS Organizations service limits (number of accounts)',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 15,
    requiresConfirmation: true,
    notes: 'Ensures capacity for all accounts to be migrated',
    slug: 'raise-limits'
  },
  {
    id: 18,
    title: 'Configure SSO with external IdP',
    description: 'Configure SSO with external IdP (Okta) in Management Account',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'Establishes identity federation with external provider',
    slug: 'configure-sso'
  },
  {
    id: 19,
    title: 'Transfer RIs',
    description: 'Transfer RIs (coordinate with ProsperOps)',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 45,
    requiresConfirmation: true,
    notes: 'Requires coordination with AWS Support',
    slug: 'transfer-ri'
  },
  {
    id: 20,
    title: 'Create new OUs in new Org',
    description: 'Create new OUs in new Organization',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 10,
    requiresConfirmation: true,
    notes: 'Organizational structure must match migration plan',
    slug: 'create-ous'
  },
  {
    id: 21,
    title: 'Replicate SSO Configs - Permission Sets',
    description: 'Replicate SSO Configurations - Permission Sets',
    phase: PhaseType.PREPARE_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 20,
    requiresConfirmation: true,
    notes: 'Ensures consistent access patterns in new organization',
    slug: 'replicate-sso'
  },
  // Verify New Environment Phase
  {
    id: 22,
    title: 'Update CC billing info and contact numbers',
    description: 'Update credit card billing information and contact numbers',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 15,
    requiresConfirmation: true,
    notes: 'Ensures billing continuity during migration',
    slug: 'update-billing'
  },
  {
    id: 23,
    title: 'Identify linked accounts to migrate',
    description: 'Update billing details and specify credit card for linked accounts',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'Prepare accounts for migration process',
    slug: 'identify-accounts'
  },
  {
    id: 24,
    title: 'Perform phone verification on all linked accounts',
    description: 'Complete phone verification process for all linked accounts',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 45,
    requiresConfirmation: true,
    notes: 'Security verification required by AWS',
    slug: 'phone-verification'
  },
  {
    id: 25,
    title: 'Remove CloudTrail account trail',
    description: 'Use only Org Trail aws-controltower-BaselineCloudTrail',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 10,
    requiresConfirmation: true,
    notes: 'Consolidates logging to organization-level trail',
    slug: 'remove-cloudtrail'
  },
  {
    id: 26,
    title: 'Move non-Prod accounts and register OUs',
    description: 'Move non-Production accounts and register OUs in ControlTower',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'Start with non-critical environments for validation',
    slug: 'move-nonprod'
  },
  {
    id: 27,
    title: 'Move accounts to new OUs',
    description: 'Verify Org CloudTrail is logging and disable legacy trail',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 25,
    requiresConfirmation: true,
    notes: 'Organize accounts according to governance structure',
    slug: 'move-accounts'
  },
  {
    id: 28,
    title: 'Register OU in Control Tower',
    description: 'Register organizational units in Control Tower',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 20,
    requiresConfirmation: true,
    notes: 'Applies governance to organizational units',
    slug: 'register-ou'
  },
  {
    id: 29,
    title: 'Remove SecOps CloudTrail',
    description: 'Use Org Trail aws-controltower-BaselineCloudTrail',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 10,
    requiresConfirmation: true,
    notes: 'Consolidates security logging to central trail',
    slug: 'remove-secops'
  },
  {
    id: 30,
    title: 'Duplicate SSO config and test access',
    description: 'Replicate SSO configuration and verify access works correctly',
    phase: PhaseType.VERIFY_NEW,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 25,
    requiresConfirmation: true,
    notes: 'Validate identity and access management setup',
    slug: 'test-sso'
  },
  // AWS Attach/Detach Phase
  {
    id: 38,
    title: 'AWS Account Attach/Detach',
    description: 'Manually attach or detach AWS accounts as needed for the migration process',
    phase: PhaseType.AWS_ATTACH_DETACH,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'This step must be performed manually in the AWS Console',
    slug: 'aws-attach-detach'
  },
  // Migration Phase
  {
    id: 31,
    title: 'Migrate smaller accounts',
    description: 'Migrate smaller AWS accounts to the new organization',
    phase: PhaseType.MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 45,
    requiresConfirmation: true,
    notes: 'Begin with lower-risk accounts to validate process',
    slug: 'migrate-small'
  },
  {
    id: 32,
    title: 'Migrate larger accounts',
    description: 'Migrate larger AWS accounts to the new organization',
    phase: PhaseType.MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 60,
    requiresConfirmation: true,
    notes: 'More complex accounts with additional resources',
    slug: 'migrate-large'
  },
  {
    id: 33,
    title: 'Migrate old payer account',
    description: 'After linked accounts migrated, move old payer to new Org as linked account',
    phase: PhaseType.MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 30,
    requiresConfirmation: true,
    notes: 'Final step in account migration sequence',
    slug: 'migrate-payer'
  },
  {
    id: 34,
    title: 'Move Production accounts to new Org',
    description: 'Migrate production accounts to the new organization',
    phase: PhaseType.MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 60,
    requiresConfirmation: true,
    notes: 'Critical environments require careful monitoring',
    slug: 'migrate-prod'
  },
  // Post Migration Phase
  {
    id: 35,
    title: 'Delete CUR report in old payer\'s S3 bucket',
    description: 'Remove Cost and Usage Report from old payer\'s S3 bucket',
    phase: PhaseType.POST_MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.FULLY_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 15,
    requiresConfirmation: true,
    notes: 'Clean up legacy cost reporting resources',
    slug: 'delete-cur'
  },
  {
    id: 36,
    title: 'Clean up and provide support',
    description: 'Perform cleanup tasks and provide post-migration support',
    phase: PhaseType.POST_MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.MANUAL,
    apiAvailable: false,
    estimatedTime: 120,
    requiresConfirmation: true,
    notes: 'Address any issues and validate migration success',
    slug: 'cleanup'
  },
  {
    id: 37,
    title: 'Import existing accounts into Control Tower',
    description: 'Import migrated accounts into Control Tower for management',
    phase: PhaseType.POST_MIGRATION,
    status: StepStatus.PENDING,
    automationType: AutomationType.SEMI_AUTOMATED,
    apiAvailable: true,
    estimatedTime: 45,
    requiresConfirmation: true,
    notes: 'Brings accounts under governance framework',
    slug: 'import-accounts'
  }
];

export const getStepsByPhase = (phase: PhaseType): MigrationStep[] => {
  return migrationSteps.filter(step => step.phase === phase);
};

// Helper function to get step by slug
export const getStepBySlug = (slug: string): MigrationStep | undefined => {
  return migrationSteps.find(step => step.slug === slug);
};

// Helper function to get step by ID
export const getStepById = (id: number): MigrationStep | undefined => {
  return migrationSteps.find(step => step.id === id);
};